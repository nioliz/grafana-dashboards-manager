# Settings to connect to the Grafana instance.
grafana:
    # Base URL for the Grafana instance.
    base_url: https://grafana.company.tld
    # Grafana API key. This is generated by Grafana, as explained at
    # http://docs.grafana.org/http_api/auth/#create-api-token
    api_key: apiauthkey
    # Alternatively a username/password can be supplied touse basic auth instead
    username: user
    password: password
    # If set, all dashboards with a name starting with this prefix will be
    # ignored by both the puller and the pusher. This setting is
    # case-insensitive and optional.
    ignore_prefix: test
    # Disables SSL certs check. Debug only! DEFAULT: false
    # insecureSkipVerify: false

# Settings to interact with the Git repository. Currently only SSH repos are
# supported.
git:
    # SSH URL to the repository. The user part (usually "git@" at the beginning
    # of the URL) must be excluded.
    url: "git.company.tld:it/grafana-dashboards.git"
    # SSH user that can pull and push from and to the git repository. Usually
    # it's just "git".
    user: git
    # Path to the private key used to authenticate on Git. It is recommended to
    # use a passphraseless key.
    private_key: /etc/grafana-dashboards-manager/id_rsa_nopasswd
    # Path to the directory where the git repository lies on the disk. If the
    # directory doesn't exist, it will be created and the repository will be
    # cloned into it.
    clone_path: /tmp/grafana-dashboards
    # Author of the commit created in the puller.
    commits_author:
        # Author's name.
        name: Grafana Dashboard Manager
        # Author's email.
        email: grafana-dashboards-manager@company.tld
    # disable pushing back to a git repo - useful for testing
    dont_commit: false
    dont_push: false
    # use to build the name of the versions file, "hostname" is special and will cause
    # os.Hostname() to be used
    versions_file_prefix: hostname
    # Should changes made by a manager (this program) be applied.
    # Set to true if using in sync mode
    apply_manager_commits: true
    # token: <GITLAB TOKEN>


# An alternative to Git synchronisation is the "simple sync" mode. This will
# only back up your dashboards on the disk and won't do anything else.
# Here is an example of the synchronisation for the simple sync mode:
#
#   simple_sync:
#       sync_path: /etc/grafana-dashboards
#
# Note that if Git settings are supplied, the settings there will be used even
# if there are settings for the "simple sync" mode. In this case, if settings for
# the "simple sync" mode are supplied, they will be ignored by the configuration.
# Note also that the "simple sync" mode doesn't work with the pusher, which needs
# Git settings to work.


# Configuration for the Git -> Grafana pusher. Optional (only required if you
# try to run the pusher).
pusher:
    # Mode which will define how the pusher will sync with the Git remote.
    # Currently, only two modes are supported:
    #   webhook:    sets up a webhook which will listen for requests from the
    #               Git remote, and use the content of a request's body to
    #               determine what to push to Grafana. Currently only GitLab
    #               webhooks are supported.
    #   git-pull:   sets up a routine that will pull from the Git remote on a
    #               given interval, and compare the updated Git history with the
    #               previous one to determine what to push to Grafana.
    sync_mode: webhook
    # Configuration for the given sync mode. The current uncommented example
    # works for the "webhook" mode. Here's a config example for the "git-pull"
    # mode:
    #
    #   config:
    #       # Interval at which the remote should be pulled, in seconds.
    #       interval: 3600
    #
    config:
        # Interface the webhook will listen on.
        interface: 127.0.0.1
        # Port the webhook will listen on.
        port: 8080
        # Path on which the webhook will live. Full webhook URL will be
        # interface:port/path.
        path: /gitlab-webhook
        # Secret GitLab will use to authenticate the requests.
        secret: mysecret
